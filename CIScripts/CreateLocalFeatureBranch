#!/usr/bin/env bash

# for usage and functionality information run this program w/o arguments


me=$(basename "$0")
if [ "$#" -gt 6 ] || [ "$#" -lt 4 ]; then
    echo "This program will checkout a forked version of the original repository, sync it with the original, create a new branch and set it up for a PR."
    echo ""
    echo "usage:"
    echo ""
    echo "$me auth user_name base_branch new_branch_name [change number] [change type]"
    echo ""
    echo "parameters:"
    echo ""
    echo "  auth:   ssh or https (use ssh if your github account is setup to use ssh)"
    echo "  user:   your github username"
    echo "  basebranch:   branch name to clone from (repository name always here SFDC-MAIN)"
    echo "  branch: name of the change (no spaces) to create a branch"
    echo "  change number (optional): insert here e.g. a targy number 56789. This number will become part of the branch name"
    echo "  change type (optional): insert here the type of change e.g. US for User Story or BUG for bug. This will be part of the branch name"
    echo ""
    echo "example:"
    echo ""
    echo "./KONE-make-pr-branch https Benudek staging new-feature-branch 27265 US"
    echo ""
    echo "notes:"
    echo ""
    echo "- if the original repository has been already forked, it'll be done by the program (it will ask you for your github password)"
    echo "- if the program is run from a directory that already contains a checked out git repository that matches the parameters, it will re-use it instead of making a new checkout."
    echo "- if the requested branch already exists it'll reuse it"
    echo "- if the master is out of sync with the original master it'll sync it first"
    echo ""
    echo "Find an explanation of the usage here [REPLACE URL] https://github.com/konecorp/SFDC-MAIN/pull/18707/files#diff-29e43be41c884e0aea08b41d1081a8ee"
    exit 0
fi

auth="$1"
user_name="$2"
# repo_name="$3"
base_branch="$3" ## typically INT
repo_name="SFDC-MAIN"
new_branch_name="$4"
change_no="$5" ## might be empty
type="$6" ## might be empty

orig_user_name="konecorp"

if [ change_no ] && [ type ]; then
    path="$repo_name-$type-$change_no-$new_branch_name"
elif change_no; then
    path="$repo_name-$change_no-$new_branch_name"
elif type; then 
    path="$repo_name-$type-$new_branch_name"
else
    path="$repo_name-$new_branch_name"
fi

# abort the script on any failure
set -e

# check curl is available
function check_curl_is_available {
    command -v curl >/dev/null 2>&1 || { echo >&2 "$me requires 'curl' but it's not installed. Aborting."; exit 1; }
}

function run() {
    local cmd="$@"
    echo "running: $cmd"
    eval $cmd || exit 1
}


if [[ "$auth" == "ssh" ]]; then
    prefix="git@github.com:"
else
    prefix="https://github.com/"
fi
url="$prefix$user_name/$repo_name.git"




# fork the repo if it hasn't been forked yet
echo -e "\n\n*** Checking if we need to fork"
was_already_forked=0
git ls-remote $url >/dev/null 2>&1 && was_already_forked=1
if [[ "$was_already_forked" -eq 1 ]]; then
    echo "$url is already forked"
else
    echo "$url doesn't exist - need to fork"
    check_curl_is_available
    run "curl -u $user_name https://api.github.com/repos/$orig_user_name/$repo_name/forks -d ''"
fi

# support an already existing checkout if it matches the desired parameters, but only if it's not dirty
clone_is_needed=1
if [[ -e ".git" ]]; then
   echo "detected current dir to be a git repository"
   if [[ -n "$(git status -s)" ]]; then
       echo "git status is not clean, not going to re-use the current checkout"
       clone_is_needed=1
   else
       cur_url=$(git config --get remote.origin.url)
       if [[ "$cur_url" == "$url" ]]; then
           echo "already on the right repo, going to re-use the current checkout"
           clone_is_needed=0
       fi
   fi
fi

# clone
if [[ "$clone_is_needed" -eq 1 ]]; then
    echo -e "\n\n*** Cloning $url to $path"
    run "git clone $url $path"
    run "cd $path"
fi

# in case there are tools that should be run, here is the place and python example to add it
# tool="tools/run-after-git-clone"
# if [[ -f $tool ]]; then
#    echo -e "\n\n*** run xyz repository setup"
#    run "python $tool"
# fi



# let's sync the forked repo master with the upstream master if it hasn't been just forked
##if [[ "$was_already_forked" -eq 1 ]]; then
##    echo -e "\n\n*** pulling $orig_user_name/$base_branch"
    ## base_sync
    ##run "git pull upstream $base_branch"
    ##run "git push origin $base_branch"
##    echo "Done"
##fi


## TO CHECK CONTINUE HERE

##git remote -v
##â€” adjust this to be sure, what you pulling:

##Populate your local repository with the latest content from your forked github repository (origin)
##> git pull origin fsmdev
##Adjust this for a new branch
##> > git checkout --track origin/fsmdev
##> git branch -a 


# now create a branch
echo -e "\n\n*** Creating '$new_branch_name' branch and setting its upstream for an easy push"
branch_already_exists=0
git show-branch $new_branch_name >/dev/null 2>&1 && branch_already_exists=1
##run "git remote update upstream --prune /"
if [[ "$branch_already_exists" -eq 1 ]]; then
    echo "$new_branch_name already exists, switching to it"
## CORRECT??? origin or upstream missing?    
    run "git checkout $new_branch_name"
else
    echo "$new_branch_name doesn't yet exist, creating"
## CORRECT??? origin or upstream missing?       
    run "git checkout -b $new_branch_name"
    echo -e "'$new_branch_name' branch was successfully created"
fi

## update our new branch with the base branch, if it wasnt just forked
if [[ "$was_already_forked" -eq 1 ]]; then
    echo -e "\n\n*** Pushing $orig_user_name/$base_branch to $user_name/$base_branch"
    ##run "git pull upstream $base_branch"
    run "git push origin $new_branch_name"
    echo "Done"
fi


# set this branch's upstream, so to enable `git push` and other git
# commands without needing to pass any more arguments.
echo -e "\n\n*** Set this $new_branch_name's upstream to simplify push and alikes"
## CORRECT???
run "git push --set-upstream origin $new_branch_name"
run "git branch -vv"

## TO CHECK : is this better as below with upstream and origin - what is the exact difference?

# setup this fork to track the upstream
#orig_repo_url="$prefix$orig_user_name/$repo_name.git"
#echo -e "\n\n*** Add the remote reference to the KONE github repository $orig_repo_url with the name upstream"
#run "git remote add upstream $orig_repo_url || echo 'already exists'"

## TO CHECK: is this origin locally or remote?

#echo -e "\n\n*** Add the remote reference to your fork in $user_name of the KONE github repository with the name origin" 
#run "git remote add origin $url || echo 'already exists'"


# only suggest to chdir if we made a clone
echo -e "1. Switch to the working dir:\n"
if [[ "$clone_is_needed" -eq 1 ]]; then
    run "cd ./$path"
else
    run "cd ."
fi

echo -e "\n\n*** Make sure crlf is converted to lf when committing changed"
run "git config --local core.autocrlf input"

echo -e "\n\n*** Ignore any file permission changes"
run "git config --local core.filemode false"

# show the setup
echo -e "\n\n*** These are $user_name 's remote branches" 
run "git remote -v"
echo -e "\n\n*** This is the local directory we just pulled from remote" 
run "ls -ltr"

run "cd .."
run "pwd"

# give parting instructions
echo -e "\n\n*** Next do: "

echo -e "Do your work.\n"
echo -e "4. When you're done:\n"
echo -e "git add -A # Add all changed (including untracked) files to local git repo:"
echo -e "git add <newfiles> # if you added new files, e.g. src/classes/MyClass.cls"
echo -e "git commit -m '#<Targetprocess deploy task number> commit message'      # if you want to commit all modified/added files"
echo -e "git push origin $new_branch_name         # push files into  branch\n"
echo -e "5. Then go to:\n"
echo -e "  https://github.com/$user_name/$repo_name/tree/$new_branch_name\n"
echo "review your changes and when you're happy with what you see, submit your PR."
echo "After you submit your PR, the test and review process will start."
echo "After the test team successfully QAed your feature branch, you will need to merge it to the respective release branch."
echo "Please check the steps here: https://github.com/konecorp/mavensmate-templates/blob/master/CIScripts/DocMakePR.md"
echo "For Troubleshooting, have a look here https://github.com/konecorp/mavensmate-templates/blob/master/CIScripts/DocGitHubCommands.md and contact your Github Administrator."
